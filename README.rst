Documentos-Projetos_Docker_PY
==================================================================================== 
Projeto de exemplo utilizando Python , Docker e pyenv para gerenciamento de vers√µes.
===================================================================================
Tecnologias Utilizadas
Python (gerenciado com pyenv)
Docker
Docker Compose
Virtualenv (venv)
Pr√©-requisitos
Python instalado (recomenda-se usar pyenv)
Docker
Docker Compose
Git
================================================================================
Configura√ß√£o do Ambiente Python
Instale a vers√£o do Python desejada usando pyenv :
pyenv install 3.12.2
pyenv local 3.12.2
==============================================================================
Reconstrua a imagem Docker 
docker build -t minha-primeira-imagem .
Aplicar as migra√ß√µes
docker compose exec web python manage.py migrate

Execute o cont√™iner   
docker run -p 8000:8000 minha-primeira-imagem
sudo usermod -aG docker "nomeusuario"
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Executando o Docker Compose
Acesse a aplica√ß√£o no navegador:
Abra seu navegador e digite o seguinte endere√ßo: 
http://localhost:8000.

Pare os servi√ßos:
Quando voc√™ terminar, volte para o terminal e pressione 
Ctrl + C.

Para reativar os servi√ßos:
docker compose up

=============================================================================
1. Rodar Migra√ß√µes e Criar um Superusu√°rio: Como o banco de dados est√° vazio, 
voc√™ precisar√° aplicar as migra√ß√µes do Django e criar um usu√°rio administrador 
para acessar o painel de administra√ß√£o.

2. Conectar-se ao Banco de Dados: Acessar o banco de dados do seu computador 
local, usando uma ferramenta como o DBeaver ou psql, para gerenciar os dados
 diretamente.

3. Configurar um Servidor de Produ√ß√£o: Mudar do servidor de desenvolvimento 
do Django para um servidor de produ√ß√£o como o Gunicorn para se preparar para 
o deploy.
==============================================================================
Para adquirir secret-key
Execute o comando shell 
PYTHONPATH=./src python manage.py shell

Gerar a chave: Dentro do console do Django, execute as seguintes linhas:
from django.core.management.utils import get_random_secret_key
print(get_random_secret_key())
============================================================================
1. Fazer as Migra√ß√µes do Banco de Dados: Aplicar as tabelas do Django no seu banco 
de dados PostgreSQL.
docker compose up

2. Criar uma Aplica√ß√£o Django: Iniciar a cria√ß√£o de uma nova aplica√ß√£o (startapp) 
para come√ßar a construir as funcionalidades do seu projeto.
docker compose exec web python manage.py migrate
3. Criar um Superusu√°rio: Criar uma conta de administrador para acessar o painel 
de administra√ß√£o do Django.
=================================================================================

Ver os cont√™ineres em execu√ß√£o
Este √© o comando mais comum para verificar se algo est√° ativo no Docker.

docker ps

Verificar os logs do cont√™iner
O servidor Django j√° imprime os logs diretamente no seu terminal, mas e se voc√™ tivesse 
rodado o cont√™iner em segundo plano? Voc√™ pode ver os logs de um cont√™iner espec√≠fico com este comando:

docker logs <nome_do_seu_cont√™iner>
================================================================================
Como Criar uma POC com seu Projeto
----------------------------------
docker-compose exec web python manage.py startapp poc
================================================================================
<<<<<Rodar o programa na pasta raiz do projeto>>>> 
-------------------------------------------------
docker-compose up    >. rodar 
docker-compose up -d   >>rodar em segundo plano
docker-compose ps  >> verificar os cont√™iners

cole em uma p√°gina>>> http://0.0.0.0:8000/

Acessar a Segunda Tela (o Painel de Administra√ß√£o) >>>  http://localhost:8000/admin/
se n√£o funcionar siga>>
depois abra um terminal diferente veja exemplo e rode o c√≥digo:
olimpio@olimpio:~/Documentos/Projeto_DockerEstudo$ docker-compose exec web python manage.py migrate
===============================================================================
Como Criar uma POC com seu Projeto
docker-compose exec web python manage.py startapp poc

Para que uma POC seja eficaz, ela deve ser focada em uma √∫nica funcionalidade. 
Um √≥timo exemplo √© uma lista de tarefas simples (um "To-Do List").

Isso vai testar a capacidade do seu projeto de:

-Receber dados do usu√°rio atrav√©s de um formul√°rio web.

-Salvar esses dados no banco de dados PostgreSQL.

-Ler esses dados do banco de dados e exibi-los em uma p√°gina web.

Com isso, voc√™ prova que seu sistema (Django, PostgreSQL, Docker) funciona em conjunto para um problema real.
================================================================================
A estrutura da tabela Task foi definida no arquivo poc/models.py

Os comandos de migra√ß√£o foram executados para traduzir o modelo de dados em uma tabela real no banco de dados PostgreSQL.

docker-compose exec web python manage.py makemigrations poc

docker-compose exec web python manage.py migrate


Configura√ß√£o do Painel de Administra√ß√£o

Um superusu√°rio foi criado para ter acesso ao painel de administra√ß√£o integrado do Django.
 Em seguida, a tabela Task foi registrada para ser gerenciada diretamente no painel.

docker-compose exec web python manage.py createsuperuser

Cria√ß√£o da L√≥gica da Aplica√ß√£o (View)
A l√≥gica para a aplica√ß√£o de tarefas foi implementada no arquivo poc/views.py.
Mapeamento das URLs
As URLs foram configuradas para direcionar as requisi√ß√µes web para a view correta, tanto para 
a p√°gina principal da POC quanto para o painel de administra√ß√£o.

Desenvolvimento da Interface (Template)
O arquivo HTML (poc/templates/poc/task_list.html) foi criado para fornecer a interface de usu√°rio,
 com um formul√°rio para adicionar tarefas 
e uma lista para exibi-las.

=================
Demonstra√ß√£o da POC
Para demonstrar a aplica√ß√£o funcional:

Inicie o ambiente: No terminal, execute 
docker-compose up -d                    para garantir que o projeto esteja rodando.

Acesse a POC: Abra o navegador e acesse a URL http://localhost:8000/.

Adicione uma tarefa: Use o formul√°rio na p√°gina principal para adicionar uma nova tarefa. A p√°gina ser√° recarregada, e a tarefa aparecer√° na lista.

Acesse o painel de administra√ß√£o: V√° para http://localhost:8000/admin/ e fa√ßa login com o superusu√°rio criado.

resertar senh sdmin django
(venv) olimpio@olimpio:~/Documentos/Projeto_Docker_PY$ docker compose exec web python manage.py changepassword <nome_do_usuario>


=============================================================================================================
üß© 1Ô∏è‚É£ Criar os atalhos no Bash

Abra o arquivo de configura√ß√£o do shell:

nano ~/.bashrc


Adicione ao final do arquivo ‚¨áÔ∏è:

# === ALIASES PARA AMBIENTES DOCKER COMPOSE ===

# Ambiente DEV (Desenvolvimento Local)
alias dev:up='docker compose -f docker-compose.yml -f docker-compose.dev.yml up -d --build'
alias dev:down='docker compose -f docker-compose.yml -f docker-compose.dev.yml down'

# Ambiente HOM (Homologa√ß√£o)
alias hom:up='docker compose -f docker-compose.yml -f docker-compose.prod.yml -p hom up -d --build'
alias hom:down='docker compose -f docker-compose.yml -f docker-compose.prod.yml -p hom down'

# Ambiente PROD (Produ√ß√£o Simulado)
alias prod:up='docker compose -f docker-compose.yml -f docker-compose.prod.yml -p prod up -d --build'
alias prod:down='docker compose -f docker-compose.yml -f docker-compose.prod.yml -p prod down'


Salve com:

Ctrl + O ‚Üí Enter ‚Üí Ctrl + X


E recarregue as configura√ß√µes:

source ~/.bashrc

‚ö° 2Ô∏è‚É£ Teste r√°pido dos ambientes
Ambiente	Porta	Subir	  Derrubar
DEV	         8080	dev:up	  dev:down
HOM	         8081	hom:up	  hom:down
PROD         8082	prod:up	  prod:down

üí° Dica: Use docker ps para verificar se os containers est√£o rodando e suas respectivas portas.

üöÄ 3Ô∏è‚É£ Instalar e Iniciar o Git Flow
Instala√ß√£o (Ubuntu/Debian):
sudo apt-get install git-flow -y

Inicializa√ß√£o (com padr√µes autom√°ticos):
git flow init -d

üß± 4Ô∏è‚É£ Comandos Git Flow R√°pidos
A√ß√£o	Comando
Criar uma nova feature	git flow feature start nome-da-feature

Finalizar a feature	git flow feature finish nome-da-feature

Criar uma release	git flow release start v1.0.0

Finalizar a release	git flow release finish v1.0.0

Criar um hotfix (em produ√ß√£o)	git flow hotfix start corrigir-bug


üß≠ 5Ô∏è‚É£ Organiza√ß√£o dos Ambientes
Ambiente	                 Arquivos utilizados	                                Porta sugerida	       Prop√≥sito
DEV	             docker-compose.yml + docker-compose.dev.yml	                    8080	               Desenvolvimento local

HOM	             docker-compose.yml + docker-compose.prod.yml (com -p hom)	        8081            	   Homologa√ß√£o/testes integrados

PROD	         docker-compose.yml + docker-compose.prod.yml (com -p prod)      	8082	               Produ√ß√£o simulada

üß∞ 6Ô∏è‚É£ Teste de funcionamento

Ap√≥s recarregar os aliases, teste na sequ√™ncia:

dev:up
docker ps   # conferir container em 8080
dev:down

hom:up
docker ps   # conferir container em 8081
hom:down

prod:up
docker ps   # conferir container em 8082
prod:down
=============================================================================================================