version: '3.8'
services:
  # 1. SERVIÇO DE BANCO DE DADOS (DB)
  # O Postgres usa as variáveis POSTGRES_USER/PASSWORD diretamente.
  db: 
    image: postgres:15-alpine
    # Carrega as credenciais de PRODUÇÃO (.env.prod)
    env_file:
      - .env.prod 
    volumes:
      # Volume isolado para o banco de dados de PROD
      - prod_db_data:/var/lib/postgresql/data 
    healthcheck:
      # Verifica a saúde do banco de dados antes que o serviço web tente conectar
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  # 2. SERVIÇO WEB (WEB)
  web:
    # Mapeia a porta 8081 do host para a porta 8000 do contêiner
    ports:
      - "8081:8000" 
    build: .
    # Comando de execução para PROD (Gunicorn)
    command: gunicorn Estoquexcel_Django1409.estoque_app.wsgi:application --bind 0.0.0.0:8000
    volumes: []
    # Carrega as variáveis de PRODUÇÃO (.env.prod)
    env_file:
      - .env.prod
    
    # Mapeia as variáveis POSTGRES_* (do .env.prod) para as variáveis DB_* que o Django espera
    environment:
      DJANGO_DEBUG: "False"
      DB_HOST: db 
      DB_PORT: 5432
      # Mapeamento do nome Docker (POSTGRES_*) para o nome Django (DB_*)
      DB_NAME: ${POSTGRES_DB} 
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      
    # Depende da saúde do DB
    depends_on:
      db:
        condition: service_healthy 

# 3. DEFINIÇÃO DE VOLUMES NA RAIZ
volumes:
  # O Docker garantirá que este volume seja prefixado (ex: prod_prod_db_data)
  prod_db_data:
    driver: local
